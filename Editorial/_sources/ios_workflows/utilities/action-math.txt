.. _workflow-action-math:

=================
Math
=================

*Evaluates a mathematical expression*

The action supports all common mathematical operators, parentheses, and a couple of functions that you would typically find in a scientific calculator.

* **Input:** Can be used in the `Expression` parameter
* **Output:** The calculated output

Parameters
----------

* **Expression:** The mathematical expression to evaluate

For evaluating the expression, the `DDMathParser <https://github.com/davedelong/DDMathParser>`_ library is used. Below is an overview of the supported operators and functions.

Some other actions that have numeric parameters (e.g. `Extend Selection` and `Move Caret`) support the same expressions as this action.

Operators
---------

.. raw:: html

    <table>
    <tr>
        <th>Operator</th>
        <th>Function</th>
        <th>Description</th>
    </tr>
    <tr>
        <th colspan=3 align="center">Standard Operators</th>
    </tr>
    <tr>
        <td><code>+</code></td>
        <td><code>add</code></td>
        <td>addition and unary positive</td>
    </tr>
    <tr>
        <td><code>-</code>&nbsp;or&nbsp;<code>&minus;</code></td>
        <td><code>subtract</code>&nbsp;and&nbsp;<code>negate</code></td>
        <td>subtraction and negation</td>
    </tr>
    <tr>
        <td><code>*</code>&nbsp;or&nbsp;<code>&times;</code></td>
        <td><code>multiply</code></td>
        <td>multiplication</td>
    </tr>
    <tr>
        <td><code>/</code>&nbsp;or&nbsp;<code>&divide;</code></td>
        <td><code>divide</code></td>
        <td>division</td>
    </tr>
    <tr>
        <td><code>%</code></td>
        <td><code>mod</code>&nbsp;or&nbsp;<code>percent</code></td>
        <td>modulus or a percentage of a value</td>
    </tr>
    <tr>
        <td><code>!</code></td>
        <td><code>factorial</code></td>
        <td>factorial</td>
    </tr>
    <tr>
        <td><code>**</code></td>
        <td><code>pow</code></td>
        <td>exponentiation</td>
    </tr>
    <tr>
        <td><code>º</code>&nbsp;or&nbsp;<code>&deg;</code></td>
        <td><code>dtor</code></td>
        <td>converts the value to radians</td>
    </tr>
    <tr>
        <th colspan=3 align="center">Bitwise Operators</th>
    </tr>
    <tr>
        <td><code>&</code></td>
        <td><code>and</code></td>
        <td>bitwise and</td>
    </tr>
    <tr>
        <td><code>|</code></td>
        <td><code>or</code></td>
        <td>bitwise or</td>
    </tr>
    <tr>
        <td><code>^</code></td>
        <td><code>xor</code></td>
        <td>bitwise xor</td>
    </tr>
    <tr>
        <td><code>~</code></td>
        <td><code>not</code></td>
        <td>bitwise not</td>
    </tr>
    <tr>
        <td><code>&lt;&lt;</code></td>
        <td><code>lshift</code></td>
        <td>bitwise left shift</td>
    </tr>
    <tr>
        <td><code>&gt;&gt;</code></td>
        <td><code>rshift</code></td>
        <td>bitwise right shift</td>
    </tr>
    <tr>
        <th colspan=3 align="center">Comparison Operators</th>
    </tr>
    <tr>
        <td><code>==</code>&nbsp;or&nbsp;<code>=</code></td>
        <td><code>l_eq</code></td>
        <td>equal</td>
    </tr>
    <tr>
        <td><code>!=</code></td>
        <td><code>l_neq</code></td>
        <td>not equal</td>
    </tr>
    <tr>
        <td><code>&lt;</code></td>
        <td><code>l_lt</code></td>
        <td>less than</td>
    </tr>
    <tr>
        <td><code>&gt;</code></td>
        <td><code>l_gt</code></td>
        <td>greater than</td>
    </tr>
    <tr>
        <td><code>&lt;=</code>&nbsp;or&nbsp;<code>&le;</code></td>
        <td><code>l_ltoe</code></td>
        <td>less than or equal</td>
    </tr>
    <tr>
        <td><code>&gt;=</code>&nbsp;or&nbsp;<code>&ge;</code></td>
        <td><code>l_gtoe</code></td>
        <td>greater than or equal</td>
    </tr>
    <tr>
        <th colspan=3 align="center">Logical Operators</th>
    </tr>
    <tr>
        <td><code>&&</code>&nbsp;or&nbsp;<code>&and;</code></td>
        <td><code>l_and</code></td>
        <td>logical and</td>
    </tr>
    <tr>
        <td><code>||</code>&nbsp;or&nbsp;<code>&or;</code></td>
        <td><code>l_or</code></td>
        <td>logical or</td>
    </tr>
    <tr>
        <td><code>!</code>&nbsp;or&nbsp;<code>&not;</code></td>
        <td><code>l_not</code></td>
        <td>logical not</td>
    </tr>
    </table>

Functions
---------

Functions that take > 1 parameter
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- `sum()` - returns a sum of the passed parameters
- `count()` - returns the number of passed parameters
- `min()` - returns the minimum of the passed parameters
- `max()` - returns the maximum of the passed parameters
- `median()` - returns the median of the passed parameters
- `stddev()` - returns the standard deviation of the passed parameters
- `average()` - returns the average of the passed parameters
- `random()` - returns a random integer.  Can take 0, 1, or 2 parameters.  The first parameter (if given) is the lower bound of the random integer.  The second parameter (if given) is the upper bound of the random integer.
- `nthroot()` - returns the n<sup>th</sup> root of a number.  For example, `nthroot(27,3)` returns the cube root of 27, or 3.

Functions that take 1 parameter
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- `sqrt()` - returns the square root of the passed parameter
- `log()` - returns the base 10 log of the passed parameter
- `ln()` - returns the base e log of the passed parameter
- `log2()` - returns the base 2 log of the passed parameter
- `exp()` - returns e raised to the power of the passed parameter
- `ceil()` - returns the passed parameter rounded up
- `floor()` - returns the passed parameter rounded down

Trigonometric functions
~~~~~~~~~~~~~~~~~~~~~~~

- `sin()`, `cos()`, `tan()`
- Their inverses (`asin`, `acos`, `atan`)
- Their reciprocals (`csc`, `sec`, `cotan`)
- The reciprocals of the inverses (`acsc`, `asec`, `acotan`)
- The hyperbolic variations of all the above functions (`sinh`, `cosh`, `tanh`, `asinh`, `acosh`, `atanh`, `csch`, `sech`, `cotanh`, `acsch`, `asech`, `acotanh`)
- The versine functions (`versin`, `vercosin`, `coversin`, `covercosin`, `haversin`, `havercosin`, `hacoversin`, `hacovercosin`, `exsec`, `excsc`, `crd`)

- `dtor()` - converts the passed parameter from degrees to radians
- `rtod()` - converts the passed parameter from radians to degrees

Functions that take no parameters ("constant functions")
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- `phi()` - returns the value of ϕ (the Golden Ratio).  Also recognized as `ϕ()`
- `pi()` - returns the value of π.  Also recognized as `π()`
- `pi_2()` - returns the value of π/2
- `pi_4()` - returns the value of π/4
- `tau()` - returns the value of τ.  Also recognized as `τ()`
- `sqrt2()` - returns the value of the square root of 2
- `e()` - returns the value of e
- `log2e()` - returns the value of the log base 2 of e
- `log10e()` - returns the value of the log base 10 of e
- `ln2()` - returns the value of the log base e of 2
- `ln10()` - returns the value of the log base e of 10
